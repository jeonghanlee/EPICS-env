name: Build

on:
   push: 

jobs:

  Ubuntu:
    runs-on: ubuntu-latest
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      - 
        name: Install required packages
        run: |
          sudo apt update -y 
          sudo apt install -y git bash wget unzip make  
          git clone https://github.com/jeonghanlee/pkg_automation
          bash pkg_automation/pkg_automation.bash -y
      - 
        name: EPICS installation
        run: |
          make init
          make conf
          make vars
          make build
          make install
      - 
        name: EPICS Environment Check
        run: |
          make exist
          make print-INSTALL_LOCATION_EPICS > a
          source $(cat a)/setEpicsEnv.bash
          caget -h

  Debian11:
    runs-on: ubuntu-latest
    container: debian:bullseye
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      - 
        name: Install required packages
        run: |
          apt update -y 
          apt install -y git make sudo bash wget unzip make  
          git clone https://github.com/jeonghanlee/pkg_automation
          bash pkg_automation/pkg_automation.bash -y
      - 
        name: EPICS installation
        run: |
          make init
          make conf
          make vars
          make build
          make install
      - 
        name: EPICS Environment Check
        run: |
          make exist
          make print-INSTALL_LOCATION_EPICS > a
          echo "no" | dpkg-reconfigure dash
          source $(cat a)/setEpicsEnv.bash
          caget -h

  Debian10:
    runs-on: ubuntu-latest
    container: debian:buster
    steps:
      - 
        name: Install required packages
        run: |
          apt update -y 
          apt install -y git make sudo bash wget unzip make  
          git clone https://github.com/jeonghanlee/pkg_automation
          bash pkg_automation/pkg_automation.bash -y
      - 
        name: EPICS installation
        run: |
          git clone https://github.com/jeonghanlee/EPICS-env
          make EPICS-env/init
          make EPICS-env/conf
          make EPICS-env/vars
          make EPICS-env/build
          make EPICS-env/install
      - 
        name: EPICS Environment Check
        run: |
          make EPICS-env/exist
          make EPICS-env/print-INSTALL_LOCATION_EPICS > a
          bash --rcfile $(cat a)/setEpicsEnv.bash
          caget -h
      
  CentOS7:
    runs-on: ubuntu-latest
    container: centos:centos7
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      - 
        name: Install required packages
        run: |
          yum update -y 
          yum install -y git make sudo bash wget unzip make  
          git clone https://github.com/jeonghanlee/pkg_automation
          bash pkg_automation/pkg_automation.bash -y
      - 
        name: EPICS installation
        run: |
          make init
          make conf
          make vars
          make build
          make install
      - 
        name: EPICS Environment Check
        run: |
          make exist
          make print-INSTALL_LOCATION_EPICS > a
          source $(cat a)/setEpicsEnv.bash
          caget -h
      
  CentOS8:
    runs-on: ubuntu-latest
    container: centos:centos8
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      - 
        name: Install required packages
        run: |
          dnf update -y 
          dnf install -y git make sudo bash wget unzip make  
          git clone https://github.com/jeonghanlee/pkg_automation
          bash pkg_automation/pkg_automation.bash -y
      - 
        name: EPICS installation
        run: |
          make init
          make conf
          make vars
          make build
          make install
      - 
        name: EPICS Environment Check
        run: |
          make exist
          make print-INSTALL_LOCATION_EPICS > a
          source $(cat a)/setEpicsEnv.bash
          caget -h

  Rocky8:
    runs-on: ubuntu-latest
    container: rockylinux/rockylinux
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      - 
        name: Install required packages
        run: |
          dnf update -y 
          dnf install -y git make sudo bash wget unzip make  
          git clone https://github.com/jeonghanlee/pkg_automation
          bash pkg_automation/pkg_automation.bash -y
      - 
        name: EPICS installation
        run: |
          make init
          make conf
          make vars
          make build
          make install
      - 
        name: EPICS Environment Check
        run: |
          make exist
          make print-INSTALL_LOCATION_EPICS > a
          source $(cat a)/setEpicsEnv.bash
          caget -h
