#
#
INSTALL:= install
INSTALL_PROGRAM:=$(INSTALL)
INSTALL_DATA:=$(INSTALL) -m 644

ifeq ($(UNAME_S),Darwin)
OS_VERSION:=$(strip $(shell sw_vers -productVersion))
OS_NAME:=$(strip $(shell sw_vers -productName))
endif
ifeq ($(UNAME_S),Linux)
OS_VERSION:=$(strip $(shell grep -Po '^VERSION_ID=\K[^d].+' /etc/os-release | sed 's/\"//g'))
OS_NAME:=$(strip $(shell grep -Po '^ID=\K[^S].+' /etc/os-release | sed 's/\"//g'))
endif


# ALS Installation Path Contains "epics",
# So, we have to install it within /usr/local/epics/alsu
# Thus, to use the final path as our INSTALL_LOCATION
# We need a logic to check whether the INSTALL_LOCATION
# has "epics" patch or not
# 
ifneq (,$(findstring /epics, $(INSTALL_LOCATION)))
    INSTALL_LOCATION_CHECK:=$(INSTALL_LOCATION)
else
    INSTALL_LOCATION_CHECK:=$(INSTALL_LOCATION)/epics
endif

# IF INSTALL_LOCATION_CHECK cannot be created, SUDO and SUDOBASH should be used 
# SUDO_INFO 1 : SUDO is needed (NOT writable)
# SUDO_INFO 0 : SUDO is not needed
# Can we create the final location?
# If yes, SUDO_INFO = 0
# IF no,  SUDO_INFO = 1
SUDO_INFO := $(shell mkdir -p $(INSTALL_LOCATION_CHECK) 1>&2 2> /dev/null; echo $$?)
SUDO_CMD  := $(shell which sudo)

# For CentOS, devtoolset-{7,8} has -E option within sudo shell
# So we have to remove -E option as well if we would like to use devtoolset
#
ifeq "$(SUDO_INFO)" "1"
SUDO = $(SUDO_CMD)
SUDOBASH := $(SUDO) -E bash -c
else
SUDO :=
SUDOBASH = bash -c
endif

PATH_NAME_EPICSVERS:=$(strip $(SRC_VER_BASE))

PATH_NAME_BASE:=base
PATH_NANE_MODULES:=modules


INSTALL_LOCATION_EPICS:=$(strip $(INSTALL_LOCATION_CHECK))/$(ENV_RELEASE_VERS)/$(OS_NAME)-$(OS_VERSION)/$(PATH_NAME_EPICSVERS)
INSTALL_LOCATION_BASE:=$(INSTALL_LOCATION_EPICS)/$(PATH_NAME_BASE)
INSTALL_LOCATION_MODS:=$(INSTALL_LOCATION_EPICS)/$(PATH_NANE_MODULES)

#
SITE_TEMPLATE_PATH:=$(TOP)/site-template
#
#
VARS_EXCLUDES+=SRC_PATH_INFO
VARS_EXCLUDES+=INSTALL
VARS_EXCLUDES+=INSTALL_PROGRAM
VARS_EXCLUDES+=INSTALL_DATA
VARS_EXCLUDES+=SUDOBASH
