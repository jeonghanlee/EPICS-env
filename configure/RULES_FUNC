# hash id is the full length
define make_p0_patch
	printf "\nCreating a p0 patch file in $(TOP)/patch\\n";
	cd $(SRC_PATH) && git diff --no-prefix > $(TOP)/patch/$$(git rev-parse HEAD).p0.patch
endef

define patch_src
for i in $(wildcard $(TOP)/patch/$(SRC_TAG)*.p0.patch); do\
	printf "\nPatching %s with the file : %s\n" "$(SRC_PATH)" "$$i";\
	patch -d $(SRC_PATH) --ignore-whitespace -p0 < $$i;\
done
endef


define revert_patch_src
for i in $(wildcard $(TOP)/patch/$(SRC_TAG)*.p0.patch); do\
	printf "\nReverting applied patch %s with the file : %s\n" "$(SRC_PATH)" "$$i";\
	patch -R -d $(SRC_PATH) --ignore-whitespace -p0 < $$i;\
done
endef

GIT_VERSION:=$(lastword $(shell git --version))

define gitclone
$(if $(wildcard $(2)), @echo "Directory $(2) exist. Please remove it first.", git clone  $(1) $(2); git -C $(2) checkout $(3))
endef

define list_distclean
$(foreach v, $(1), @rm -rf $(v))
endef

define distclean
$(if $(wildcard $(1)), rm -rf $(1), @echo "There is no source path at $(1).")
endef

# it may be useful for git with older than 1.8.5, which doesn't have -C option.
define gitclone2
	git clone  $(1) $(2) 
	cd $(2) && git checkout $(3)
endef


ifndef VERBOSE
  QUIET := @
endif


ifdef DEBUG_SHELL
  SHELL = /bin/sh -x
endif


# 1 : SRC_PATH
# 2 : rule name
# 3 : return vars
define a_rule_BUILDER
$(2).$(patsubst %-src,%, $(patsubst %/client, %, $(1))):
	@make -C $(1) $(2)

$(3)+=$(2).$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 2 : rule name 
# 3 : return vars 
define rules_BUILDER
$(foreach dir, $(1), $(eval $(call a_rule_BUILDER,$(dir),$(2),$(3))))
endef


# 1 : SRC_PATH
# 2 : return vars
# 3 : dependent module build rule list (ORDER!!!)
define a_buildrule_BUILDER
build.$(patsubst %-src,%, $(patsubst %/client, %, $(1))): $($(3))
	@make -C $(1)

$(2)+=build.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 2 : return vars  
# list of the dependent module build rule list (ORDER!!!)
#     we have to develop a list according to SRC_PATH_MODULES
#     SRC_PATH_DEPS ??
## in order to debug, replace eval with info
define buildrules_BUILDER
$(foreach dir, $(1), $(eval $(call a_buildrule_BUILDER,$(dir),$(2),$(patsubst %-src,%, $(patsubst %/client, %, $(dir)))_DEPS)))
endef


### Exclude the following variables to display
VARS_EXCLUDES+=make_p0_patch
VARS_EXCLUDES+=patch_src
VARS_EXCLUDES+=revert_patch_src
VARS_EXCLUDES+=QUIET
VARS_EXCLUDES+=SHELL
VARS_EXCLUDES+=gitclone
VARS_EXCLUDES+=gitclone2
VARS_EXCLUDES+=distclean
VARS_EXCLUDES+=a_rule_BUILDER
VARS_EXCLUDES+=rules_BUILDER
VARS_EXCLUDES+=a_buildrule_BUILDER
VARS_EXCLUDES+=buildrules_BUILDER
