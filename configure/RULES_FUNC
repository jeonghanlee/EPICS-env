# hash id is the full length
define make_base_p0_patch
	printf "\nCreating a p0 patch file in $(TOP)/patch\\n";
	cd $(SRC_PATH_BASE) && git diff --no-prefix > $(TOP)/patch/$(SRC_VER_BASE).base.p0.patch
endef

define base_patch_src
@for i in $(wildcard $(TOP)/patch/$(SRC_VER_BASE).base.p0.patch); do\
	printf "\nPatching %s with the file : %s\n" "$(SRC_PATH_BASE)" "$$i";\
	patch -d $(SRC_PATH_BASE) --ignore-whitespace -p0 < $$i;\
done
endef

define base_revert_patch_src
@for i in $(wildcard $(TOP)/patch/$(SRC_VER_BASE).base.p0.patch); do\
	printf "\nReverting applied patch %s with the file : %s\n" "$(SRC_PATH_BASE)" "$$i";\
	patch -R -d $(SRC_PATH_BASE) --ignore-whitespace -p0 < $$i;\
done
endef

GIT_VERSION:=$(lastword $(shell git --version))

define gitclone2
$(if $(wildcard $(2)), @echo "Directory $(2) exist. Please remove it first.", git clone  $(1) $(2); git -C $(2) checkout $(3))
endef

define list_distclean
$(foreach v, $(1), @rm -rf $(v))
endef

define distclean
$(if $(wildcard $(1)), rm -rf $(1), @echo "There is no source path at $(1).")
endef

# it may be useful for git with older than 1.8.5, which doesn't have -C option.
define gitclone
	git clone  $(1) $(2)
	cd $(2) && git checkout $(3)
endef


ifndef VERBOSE
  QUIET := @
endif


ifdef DEBUG_SHELL
  SHELL = /bin/sh -x
endif


# 1 : SRC_PATH
# 2 : rule name
# 3 : return vars
define a_rule_BUILDER
$(2).$(patsubst %-src,%, $(patsubst %/client, %, $(1))):
	@$$(SUDOBASH) "$$(DO_MAKE) -C $(1) $(2)"

$(3)+=$(2).$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 2 : rule name
# 3 : return vars
## For debugging purpose, please check buildrules_BUIDER
define rules_BUILDER
$(foreach dir, $(1), $(eval $(call a_rule_BUILDER,$(dir),$(2),$(3))))
endef


# 1 : SRC_PATH
# 2 : return vars
# 3 : dependent module build rule list (ORDER!!!)
## For debugging purpose, please check buildrules_BUIDER
define a_buildrule_BUILDER
build.$(patsubst %-src,%, $(patsubst %/client, %, $(1))): $($(3))
	@$$(SUDOBASH) "$$(DO_MAKE) -C $(1)"

$(2)+=build.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 2 : return vars
# list of the dependent module build rule list (ORDER!!!)
#     we have to develop a list according to SRC_PATH_MODULES
#     SRC_PATH_DEPS ??
## For debugging purpose, please use info instead of eval
define buildrules_BUILDER
$(foreach dir, $(1), $(eval $(call a_buildrule_BUILDER,$(dir),$(2),$(patsubst %-src,%, $(patsubst %/client, %, $(dir)))_DEPS)))
endef



# 1 : SRC_PATH
# 2 : return vars
define symlink_rule_BUILDER
symlink.$(patsubst %-src,%, $(patsubst %/client, %, $(1))): cleansymlink.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))
	@cd $$(INSTALL_LOCATION_MODS) && $$(SUDO) ln -sf ./$$(filter $(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))-%, $$(notdir $$(MODS_INSTALL_LOCATIONS))) ./$(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))

$(2)+=symlink.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 3 : return vars
define symlinks_BUILDER
$(foreach dir, $(1), $(eval $(call symlink_rule_BUILDER,$(dir),$(2))))
endef



# 1 : SRC_PATH
# 2 : return vars
define clean_symlink_rule_BUILDER
cleansymlink.$(patsubst %-src,%, $(patsubst %/client, %, $(1))):
	@$$(SUDO) rm -f $$(INSTALL_LOCATION_MODS)/$(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))

$(2)+=cleansymlink.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 3 : return vars
define clean_symlinks_BUILDER
$(foreach dir, $(1), $(eval $(call clean_symlink_rule_BUILDER,$(dir),$(2))))
endef



# 1 : SRC_PATH
# 2 : return vars
define readelf_rule_BUILDER
readelf.$(patsubst %-src,%, $(patsubst %/client, %, $(1))):
	@-readelf -d $$(INSTALL_LOCATION_MODS)/$$(filter $(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))-%, $$(notdir $$(MODS_INSTALL_LOCATIONS)))/lib/*/lib*.so
	@-readelf -d $$(INSTALL_LOCATION_MODS)/$$(filter $(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))-%, $$(notdir $$(MODS_INSTALL_LOCATIONS)))/bin/*/*


$(2)+=readelf.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 3 : return vars
define readelf_BUILDER
$(foreach dir, $(1), $(eval $(call readelf_rule_BUILDER,$(dir),$(2))))
endef



# 1 : SRC_PATH
# 2 : return vars
define ldd_rule_BUILDER
ldd.$(patsubst %-src,%, $(patsubst %/client, %, $(1))):
	@-ldd $$(INSTALL_LOCATION_MODS)/$$(filter $(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))-%, $$(notdir $$(MODS_INSTALL_LOCATIONS)))/lib/*/lib*.so
	@-ldd $$(INSTALL_LOCATION_MODS)/$$(filter $(patsubst $(SRC_NAME_SNCSEQ),seq,$(patsubst %-src,%, $(patsubst %/client, %, $(1))))-%, $$(notdir $$(MODS_INSTALL_LOCATIONS)))/bin/*/*

$(2)+=ldd.$(patsubst %-src,%, $(patsubst %/client, %, $(1)))

endef

# 1 : SRC_PATH_MODULES
# 3 : return vars
define ldd_BUILDER
$(foreach dir, $(1), $(eval $(call ldd_rule_BUILDER,$(dir),$(2))))
endef



### Exclude the following variables to display
VARS_EXCLUDES+=%_patch
VARS_EXCLUDES+=%_patch_src
VARS_EXCLUDES+=QUIET
VARS_EXCLUDES+=SHELL
VARS_EXCLUDES+=gitclone%
VARS_EXCLUDES+=distclean
VARS_EXCLUDES+=%_BUILDER
