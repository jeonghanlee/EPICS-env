.PHONY: init.base clone.base update.base conf.base conf.base.show

init.base: clone.base

# gitclone use '-C' option, so git version should be more than 1.8.5. CentOS7 git is imcompatiable.
#

patch.base: patch.base.apply

clone.base:
	@if test -d "$(TOP)/$(SRC_PATH_BASE)"; then \
		printf "Skip clone, because of the exist directory %s.\n" "$(SRC_PATH_BASE)"; \
	else \
		git clone $(SRC_GITURL_BASE) $(SRC_PATH_BASE); \
		cd $(SRC_PATH_BASE) && git checkout $(SRC_TAG_BASE) && git submodule update --init ./ ;\
	fi


conf.base: conf.base.site conf.base.env

conf.base.site:
	$(QUIET)-rm -f $(CONF_PATH_BASE)/CONFIG_SITE.local $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "INSTALL_LOCATION=$(INSTALL_LOCATION_BASE)"                      > $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "CROSS_COMPILER_TARGET_ARCHS=$(CROSS_COMPILER_TARGET_ARCHS)"    >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "LINKER_USE_RPATH = $(LINKER_USE_RPATH)"                        >> $(CONF_PATH_BASE)/CONFIG_SITE.local
#	$(QUIET)echo "LINKER_ORIGIN_ROOT = $(LINKER_ORIGIN_ROOT)"                    >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "EPICS_SITE_VERSION = \$(EPICS_SITE_VERSION)\"                  >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "GENVERSIONDEFAULT = \$(EPICS_VCS_VERSION)\"                    >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "OP_SYS_LDFLAGS += \$$(SHRLIB_SEARCH_DIRS:%=-Wl,-rpath-link,%)" >> $(CONF_PATH_BASE)/CONFIG_SITE.local
#	$(QUIET)echo "EXTRA_SHRLIBDIR_RPATH_LDFLAGS_ORIGIN_NO += \$$(SHRLIB_SEARCH_DIRS:%=-Wl,-rpath-link,%)"       >> $(CONF_PATH_BASE)/CONFIG_SITE.local
#	$(QUIET)echo "OP_SYS_LDFLAGS += \$$(EXTRA_SHRLIBDIR_RPATH_LDFLAGS_\$$(LINKER_USE_RPATH)_\$$(STATIC_BUILD))" >> $(CONF_PATH_BASE)/CONFIG_SITE.local

conf.base.env:
	$(QUIET)echo ""
	$(QUIET)echo "EPICS_TZ = \$(EPICS_TZ)\"                                      > $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_TS_NTP_INET = $(EPICS_TS_NTP_INET)"                     >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "IOCSH_PS1 = \$(IOCSH_PS1)\"                                   >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "IOCSH_HISTSIZE = $(IOCSH_HISTSIZE)"                           >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "IOCSH_HISTEDIT_DISABLE = $(IOCSH_HISTEDIT_DISABLE)"           >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_INET = $(EPICS_IOC_LOG_INET)"                   >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_FILE_NAME = $(EPICS_IOC_LOG_FILE_NAME)"         >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_FILE_COMMAND = $(EPICS_IOC_LOG_FILE_COMMAND)"   >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_FILE_LIMIT = $(EPICS_IOC_LOG_FILE_LIMIT)"       >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV


conf.base.show:
	$(QUIET)echo ">>> $(CONF_PATH_BASE)/CONFIG_SITE.local"
	$(QUIET)-cat -b $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo ""
	$(QUIET)echo ">>>  $(CONF_PATH_BASE)/CONFIG_SITE_ENV"
	$(QUIET)-cat -b $(CONF_PATH_BASE)/CONFIG_SITE_ENV

# https://github.com/epics-base/pvxs/blob/cd5570b35035994d87c3c6170ebabcda26359ea0/configure/toolchain.c
conf.gz.base: conf.base
	$(QUIET)echo "USR_CFLAGS   += -g0 -gz=zlib" >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "USR_CXXFLAGS += -g0 -gz=zlib" >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "USR_LDFLAGS  += -g0 -gz=zlib" >> $(CONF_PATH_BASE)/CONFIG_SITE.local

.PHONEY: readelf.base ldd.base

# Some error we can see, so ignore them
readelf.base:
	$(QUIET)echo ">>> $(INSTALL_LOCATION_BASE)/lib/*/lib*.so"
	$(QUIET)-readelf -d $(INSTALL_LOCATION_BASE)/lib/*/lib*.so
	$(QUIET)echo ">>> $(INSTALL_LOCATION_BASE)/bin/*/"
	$(QUIET)-readelf -d $(shell find $(INSTALL_LOCATION_BASE)/bin/*/ -type f  | grep -Ev  ".pl|.service|S99*|*.py")

# Some error we can see, so ignore them
readelf.runpath.base:
	$(QUIET)echo ">>> $(INSTALL_LOCATION_BASE)/lib/*/lib*.so | grep RUNPATH"
	$(QUIET)-readelf -d $(INSTALL_LOCATION_BASE)/lib/*/lib*.so | grep RUNPATH
	$(QUIET)echo ">>> $(INSTALL_LOCATION_BASE)/bin/*/ | grep RUNPATH"
	$(QUIET)-readelf -d $(shell find $(INSTALL_LOCATION_BASE)/bin/*/ -type f  | grep -Ev  ".pl|.service|S99*|*.py") | grep RUNPATH

BASE_BIN:=$(find $(INSTALL_LOCATION_BASE)/bin/*/ -type f  | grep -Ev  ".pl|.service|S99*|*.py")

ldd.base:
	$(QUIET)echo ">>> $(INSTALL_LOCATION_BASE)/lib/*/lib*.so"
	$(QUIET)-ldd $(INSTALL_LOCATION_BASE)/lib/*/lib*.so
	$(QUIET)echo ">>> $(INSTALL_LOCATION_BASE)/bin/*/{ca*,pv*,soft*}"
	$(QUIET)-ldd $(shell find $(INSTALL_LOCATION_BASE)/bin/*/ -type f  | grep -Ev  ".pl|.service|S99*|*.py")

.PHONEY: install.base build.base clean.base distclean.base


install.base:
	$(DO_MAKE) -C $(SRC_PATH_BASE) install
	$(QUIET) $(INSTALL_DATA) -b $(TOP)/scripts/setEpicsEnv.bash  $(INSTALL_LOCATION_EPICS)/

build.base:
	$(DO_MAKE) -C $(SRC_PATH_BASE) -j 4

clean.base:
	$(DO_MAKE) -C $(SRC_PATH_BASE) clean

distclean.base:
	$(call distclean, $(SRC_PATH_BASE))

.PHONEY: null.base
null.base: ;
