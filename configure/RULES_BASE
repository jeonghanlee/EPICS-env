.PHONY: init.base clone.base update.base conf.base conf.base.show

init.base: clone.base

# gitclone use '-C' option, so git version should be more than 1.8.5. CentOS7 git is imcompatiable.
#

patch.base: patch.base.apply

clone.base:
	@if test -d "$(TOP)/$(SRC_PATH_BASE)"; then \
		printf "Skip clone, because of the exist directory %s.\n" "$(SRC_PATH_BASE)"; \
	else \
		git clone $(SRC_GITURL_BASE) $(SRC_PATH_BASE); \
		cd $(SRC_PATH_BASE) && git checkout $(SRC_TAG_BASE) && git submodule update --init ./ ;\
	fi


conf.base:
ifneq ($(wildcard $(CONF_PATH_BASE)/CONFIG_SITE_ENV),)
	$(QUIET)-rm -f $(CONF_PATH_BASE)/CONFIG_SITE.local $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "INSTALL_LOCATION=$(INSTALL_LOCATION_BASE)"                     > $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "CROSS_COMPILER_TARGET_ARCHS=$(CROSS_COMPILER_TARGET_ARCHS)"   >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "LINKER_USE_RPATH = $(LINKER_USE_RPATH)"                         >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "LINKER_ORIGIN_ROOT = $(LINKER_ORIGIN_ROOT)"                     >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "EPICS_SITE_VERSION = \$(EPICS_SITE_VERSION)\"                   >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo "GENVERSIONDEFAULT = \$(EPICS_VCS_VERSION)\"                   >> $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo ""
	$(QUIET)echo "EPICS_TZ = \$(EPICS_TZ)\"                                      > $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_TS_NTP_INET = $(EPICS_TS_NTP_INET)"                     >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "IOCSH_PS1 = \$(IOCSH_PS1)\"                                   >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "IOCSH_HISTSIZE = $(IOCSH_HISTSIZE)"                           >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "IOCSH_HISTEDIT_DISABLE = $(IOCSH_HISTEDIT_DISABLE)"           >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_INET = $(EPICS_IOC_LOG_INET)"                   >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_FILE_NAME = $(EPICS_IOC_LOG_FILE_NAME)"         >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_FILE_COMMAND = $(EPICS_IOC_LOG_FILE_COMMAND)"   >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
	$(QUIET)echo "EPICS_IOC_LOG_FILE_LIMIT = $(EPICS_IOC_LOG_FILE_LIMIT)"       >> $(CONF_PATH_BASE)/CONFIG_SITE_ENV
else
	$(QUIET)echo "There is no $(SRC_PATH_BASE)."
endif

conf.base.show:
	$(QUIET)echo ">>> $(CONF_PATH_BASE)/CONFIG_SITE.local"
	$(QUIET)cat -b $(CONF_PATH_BASE)/CONFIG_SITE.local
	$(QUIET)echo ""
	$(QUIET)echo ">>>  $(CONF_PATH_BASE)/CONFIG_SITE_ENV"
	$(QUIET)cat -b $(CONF_PATH_BASE)/CONFIG_SITE_ENV


.PHONEY: install.base build.base clean.base distclean.base


install.base:
	make -C $(SRC_PATH_BASE) install
	$(QUIET) $(INSTALL_DATA) -b $(TOP)/scripts/setEpicsEnv.bash  $(INSTALL_LOCATION_EPICS)/

build.base: 
	make -C $(SRC_PATH_BASE) -j 4

clean.base:
	make -C $(SRC_PATH_BASE) clean

distclean.base:
	$(call distclean, $(SRC_PATH_BASE))

.PHONEY: null.base
null.base: ;
